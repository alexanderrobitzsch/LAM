//// File Name: LAM_RcppExports.h
//// File Version: 0.02
// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_LAM_RCPPEXPORTS_H_GEN_
#define RCPP_LAM_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace LAM {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("LAM", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("LAM", "_LAM_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in LAM");
            }
        }
    }

    inline double lam_loglike_mvnorm_rcpp(arma::colvec M, arma::mat S, arma::colvec mu, arma::mat Sigma, double n, bool use_log, double lambda, bool ginv, double eps) {
        typedef SEXP(*Ptr_lam_loglike_mvnorm_rcpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_lam_loglike_mvnorm_rcpp p_lam_loglike_mvnorm_rcpp = NULL;
        if (p_lam_loglike_mvnorm_rcpp == NULL) {
            validateSignature("double(*lam_loglike_mvnorm_rcpp)(arma::colvec,arma::mat,arma::colvec,arma::mat,double,bool,double,bool,double)");
            p_lam_loglike_mvnorm_rcpp = (Ptr_lam_loglike_mvnorm_rcpp)R_GetCCallable("LAM", "_LAM_lam_loglike_mvnorm_rcpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_lam_loglike_mvnorm_rcpp(Shield<SEXP>(Rcpp::wrap(M)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(mu)), Shield<SEXP>(Rcpp::wrap(Sigma)), Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(use_log)), Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(ginv)), Shield<SEXP>(Rcpp::wrap(eps)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double lam_loglike_mvnorm_na_pattern_rcpp(Rcpp::List suff_stat, arma::colvec mu, arma::mat Sigma, bool use_log, double lambda, bool ginv, double eps) {
        typedef SEXP(*Ptr_lam_loglike_mvnorm_na_pattern_rcpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_lam_loglike_mvnorm_na_pattern_rcpp p_lam_loglike_mvnorm_na_pattern_rcpp = NULL;
        if (p_lam_loglike_mvnorm_na_pattern_rcpp == NULL) {
            validateSignature("double(*lam_loglike_mvnorm_na_pattern_rcpp)(Rcpp::List,arma::colvec,arma::mat,bool,double,bool,double)");
            p_lam_loglike_mvnorm_na_pattern_rcpp = (Ptr_lam_loglike_mvnorm_na_pattern_rcpp)R_GetCCallable("LAM", "_LAM_lam_loglike_mvnorm_na_pattern_rcpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_lam_loglike_mvnorm_na_pattern_rcpp(Shield<SEXP>(Rcpp::wrap(suff_stat)), Shield<SEXP>(Rcpp::wrap(mu)), Shield<SEXP>(Rcpp::wrap(Sigma)), Shield<SEXP>(Rcpp::wrap(use_log)), Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(ginv)), Shield<SEXP>(Rcpp::wrap(eps)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_LAM_RCPPEXPORTS_H_GEN_
